public class StackByDynamicArray
{
  private int CAPACITY;
  private int top = -1;
  private int topmax;
  private Object[] o;
   Object[] onew = null;

  StackByDynamicArray()
  {
  	this.CAPACITY=10;
  	o = new Object[10];
  	this.topmax =9;
  }

  StackByDynamicArray(int cap)
  {
     this.CAPACITY = cap;
     o = new Object[CAPACITY];
     this.topmax = CAPACITY -1;
  }

  public void expand()
  {
  	CAPACITY = 2*CAPACITY;
  	topmax = CAPACITY-1;
  	onew = new Object[CAPACITY];
  	for(int i =0;i<=top;i++)
  	{
  		onew[i]=o[i];
  	}
  	o=onew;
  	onew=null;

  }

  public void shrink()
  {
  	int size = size();
  	if(size < (CAPACITY/2))
    {
    	CAPACITY = (3*CAPACITY)/4;
    	topmax = CAPACITY-1;
    }

  }

  public void push(Object element) throws Exception
  {
  		if(top == topmax)
  		{
  			expand();
  		}

  		top++;
  		o[top] = element;
  }


  public Object pop() throws Exception
  {
  	    Object i = null;
  	    shrink();
  		if(top < 0)
  		{
  			throw new Exception("Stack is empty cant pop elements");    
  		}
  		else
  		{
  			i = o[top];
  			o[top] = null;
  			top--;
  		}
  		return i;
  }

  
  public Object peek() throws Exception
  {
  	    Object i = null;
  		if(top < 0)
  		{
  			throw new Exception("Stack is empty cant pop elements");	    
  		}
  		else
  		{
  			i = o[top];
  		}
  		return i;
  }

  public int size()
  {
  	int size =top+1;
  	if(top < 0)
  	{
  		size = 0;
  	}	
    return size;
  }

  public int capacity()
  {
  	return CAPACITY;
  }


  public boolean isEmpty()
  {
  	boolean b = false;
    if(top < 0)
    {
      b =true;
    }
    return b;
  }

   public boolean isFull()
  {
  	boolean b = false;
    if(top == topmax)
    {
      b =true;
    }
    return b;
  }

  public String toString()
  {
  	String s = "Stack is empty";
     if(top >= 0)
     {
     	 s= "";
     	for(int i=0;i<=top;i++)
     	{
     		s= s+" "+ o[i];
     	}
     }
    return s;
  
  }
}


class Test
{
   public static void main(String[] args) throws Exception
   {
     StackByDynamicArray stack = new StackByDynamicArray(3);
     stack.push(new Integer(1));
     stack.push(new Integer(2));
     stack.push(new Integer(3));
     stack.push(new Integer(4));
     stack.push(new Integer(5));
     stack.push(new Integer(6));
     stack.push(new Integer(7));
     stack.push(new Integer(1));
     stack.push(new Integer(2));
     stack.push(new Integer(3));
     stack.push(new Integer(4));
     stack.push(new Integer(5));
     stack.push(new Integer(6));
     stack.push(new Integer(7));
     stack.push(new Integer(1));
     stack.push(new Integer(2));
     stack.push(new Integer(3));
     stack.push(new Integer(4));
     stack.push(new Integer(5));
     stack.push(new Integer(6));
     stack.push(new Integer(7));
     
    

     System.out.println("The stack contains values" + stack);
  

      System.out.println(stack.size());
      System.out.println(stack.capacity());
      System.out.println(stack.isEmpty());
      System.out.println(stack.isFull());
      System.out.println(stack.peek());

      stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();
     stack.pop();

     System.out.println("The stack contains values" + stack);
  

      System.out.println(stack.size());
      System.out.println(stack.capacity());
      System.out.println(stack.isEmpty());
      System.out.println(stack.isFull());
      System.out.println(stack.peek());
     
   }
}
